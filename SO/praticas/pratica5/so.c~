#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Função auxiliar que imprime a matriz na tela
void printMatrix(int *matrix, int line, int column) {
	// impressão da matriz toda
	int order = line;
	int i, j;
	
	for (i = 0; i < order; i++) {
		printf (" | ");
		for (j = 0; j < order; j++) {
			printf (" %d|", matrix[i * order + j]);
		}
		printf ("\n");
	}
}

// Função usada para multiplicar uma matriz pela outra
int * multMatrix (int *A, int *B, int ordem) {
	int * C = (int*)malloc(sizeof(int) * ordem * ordem);
	int i, j, k;
	
	for(i = 0; i < ordem; i++) 
     for( j = 0; j < ordem; j++)
        for( k = 0; k < ordem; k++) 
          C[i*ordem+j]+=A[i*ordem+k]*B[k*ordem+j];
          
    return C;          
}

int main (int argc, char **argv)
{
	if (argc != 3) {
		printf ("Erro, uso correto: ./program dimension_a dimension_b \n");
		exit(0);
	}
	int a, b, x=0,y=0,aux=0;
	int ld;
	int *matriz;
	clock_t start,end;  // marcar o tempo de execução
	
	a = atoi(argv[1]);
	//b = atoi(argv[2]);
	
	ld = a;
	
	//printf ("\nInicio do programa\n");
	
	//printf ("Numero de linhas:%d\nNumero de colunas:%d\n\n", a, b);
	
	//double *matrix;
	
	//matrix = (double*) malloc(sizeof(double) * (ordem) * (ordem));
	
	//construção da matriz LDLt modificada
	//x = valor_minimo + rand() % ( valor_maximo - valor_minimo ) ;
	//gerar números aleatórios
	srand(time(NULL));
	
	//Alocando matriz e preenchendo com zeros.
    matriz =  (int*) calloc(ld*ld, sizeof(int));
   
	for(y = 0; y < ld; y++){
		matriz[y*ld+y] = (1+rand()%100);
	}
	
	y=0;
	for(x = 0; x < ld; x++){
		aux =(1+rand()%100);
		if(y <= x-1){
			matriz[x*ld+y] = aux;
			matriz[y*ld+x] = aux;
			y++;
		}
	}
	//printMatrix(matrix, a, b);
	
	//printf ("\n");
	int *C;
	
   start = clock();
      C = multMatrix(matriz, matriz, ld);  
    end = clock();
    
    double timeelapsed = ((double)(end-start))/CLOCKS_PER_SEC;

                                            
    //cout << "["<< a << "]" << " = " << timeelapsed << " sec." <<endl;
    printf ("%d\t%.4lf\n", ld, timeelapsed);
	
	free(matriz);
	free (C);
	
	
	return 0;
}
